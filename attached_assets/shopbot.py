import discord
from discord.ext import commands
from discord.ui import View, Button, Modal, TextInput
import json
import os
from datetime import datetime
from pathlib import Path
import re
from myserver import server_on

# Get the directory of the current script to ensure file paths are correct
SCRIPT_DIR = Path(__file__).parent.absolute()
PRODUCTS_FILE = SCRIPT_DIR / "products.json"
HISTORY_FILE = SCRIPT_DIR / "history.json"

# Setup bot with necessary intents
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents, help_command=None)

def load_products():
    """Load product data from the JSON file"""
    try:
        with open(PRODUCTS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"Products file not found at {PRODUCTS_FILE}")
        return []
    except json.JSONDecodeError:
        print(f"Invalid JSON in products file at {PRODUCTS_FILE}")
        return []

def save_products(products):
    """Save product data to the JSON file"""
    with open(PRODUCTS_FILE, "w", encoding="utf-8") as f:
        json.dump(products, f, ensure_ascii=False, indent=2)

def log_purchase(user, items, total_price):
    """Log purchase history to the JSON file"""
    # Create the history file if it doesn't exist
    if not HISTORY_FILE.exists():
        HISTORY_FILE.touch()
        
    with open(HISTORY_FILE, "a", encoding="utf-8") as f:
        data = {
            "user": str(user),
            "items": items,
            "total": total_price,
            "timestamp": datetime.now().isoformat()
        }
        f.write(json.dumps(data, ensure_ascii=False) + "\n")

class QuantityModal(Modal):
    """Modal for entering product quantity"""
    def __init__(self, product_index, product):
        super().__init__(title=f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {product['name']}")
        self.product_index = product_index
        self.product = product
        self.quantity = None
        
        # Create text input for quantity
        self.quantity_input = TextInput(
            label=f"‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {product['name']} ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£",
            placeholder="‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô",
            required=True,
            min_length=1,
            max_length=3,
            default="1"
        )
        self.add_item(self.quantity_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
            # Convert input to integer
            quantity = int(self.quantity_input.value)
            if quantity < 0:
                await interaction.response.send_message("‚ùå ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö 0", ephemeral=True)
                return
            elif quantity > 100:
                await interaction.response.send_message("‚ùå ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 100", ephemeral=True)
                return
                
            self.quantity = quantity
            await interaction.response.defer()
        except ValueError:
            await interaction.response.send_message("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô", ephemeral=True)

class ShopView(View):
    """Main shop view with product buttons"""
    def __init__(self, category=None):
        super().__init__(timeout=None)
        self.all_products = load_products()
        
        # Filter products by category if specified
        if category:
            self.products = [p for p in self.all_products if p.get('category', '') == category]
        else:
            self.products = self.all_products
            
        self.quantities = [0] * len(self.products)
        
        # Create buttons for each product
        for idx, product in enumerate(self.products):
            self.add_item(ProductButton(idx, self.products))
            
        # Add reset and confirm buttons
        self.add_item(ResetButton())
        self.add_item(ConfirmButton(self.products))

class ProductButton(Button):
    """Button for each product in the shop"""
    def __init__(self, index, products):
        self.index = index
        product = products[index]
        label = f"{product['emoji']} {product['name']} - {product['price']}‡∏ø"
        super().__init__(label=label, style=discord.ButtonStyle.primary, custom_id=f"product_{index}")

    async def callback(self, interaction: discord.Interaction):
        view: ShopView = self.view
        
        # Create modal for quantity input
        modal = QuantityModal(self.index, view.products[self.index])
        await interaction.response.send_modal(modal)
        # Wait for modal to be submitted
        await modal.wait()
        
        if modal.quantity is not None:
            # Update quantity in view
            view.quantities[self.index] = modal.quantity
            
            # Generate summary of selected items
            lines = []
            for i, qty in enumerate(view.quantities):
                if qty > 0:
                    p = view.products[i]
                    lines.append(f"{p['emoji']} {p['name']} - {p['price']}‡∏ø x {qty} = {p['price'] * qty}‡∏ø")
            
            summary = "\n".join(lines) or "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
            total = sum(view.products[i]['price'] * qty for i, qty in enumerate(view.quantities))
            
            message = f"üõçÔ∏è ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:\n{summary}\n\nüíµ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: {total}‡∏ø"
            await interaction.message.edit(content=message, view=view)

class ResetButton(Button):
    """Button to reset the cart"""
    def __init__(self):
        super().__init__(label="üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤", style=discord.ButtonStyle.danger, custom_id="reset")

    async def callback(self, interaction: discord.Interaction):
        view: ShopView = self.view
        view.quantities = [0] * len(view.products)
        await interaction.response.edit_message(content="üõçÔ∏è ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:\n‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", view=view)

class ConfirmButton(Button):
    """Button to confirm the purchase"""
    def __init__(self, products):
        super().__init__(label="‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠", style=discord.ButtonStyle.success, custom_id="confirm")
        self.products = products

    async def callback(self, interaction: discord.Interaction):
        view: ShopView = self.view
        total_price = sum(self.products[i]['price'] * qty for i, qty in enumerate(view.quantities))
        
        # Check if cart is empty
        if total_price == 0:
            await interaction.response.send_message("‚ùó ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô", ephemeral=True)
            return
            
        # Generate receipt
        lines = []
        items = []
        for i, qty in enumerate(view.quantities):
            if qty > 0:
                p = self.products[i]
                total = p['price'] * qty
                lines.append(f"{p['emoji']} {p['name']} - {p['price']}‡∏ø x {qty} = {total}‡∏ø")
                items.append({"name": p["name"], "qty": qty, "price": p["price"]})
        
        # Log the purchase and generate receipt
        try:
            log_purchase(interaction.user, items, total_price)
            summary = "\n".join(lines)
            embed = discord.Embed(
                title="üßæ ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô",
                description=f"**‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:** {interaction.user.mention}\n**‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:** {datetime.now().strftime('%d/%m/%Y %H:%M')}",
                color=0x00ff00
            )
            embed.add_field(name="‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", value=summary, inline=False)
            embed.add_field(name="‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°", value=f"üíµ {total_price}‡∏ø", inline=False)
            embed.set_footer(text="‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£! üôè")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠ (‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
            await interaction.response.send_message(embed=embed, ephemeral=True)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡πÅ‡∏ä‡∏ó‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏´‡πá‡∏ô
            public_embed = discord.Embed(
                title="üßæ ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô",
                description=f"**‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:** {interaction.user.mention}\n**‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:** {datetime.now().strftime('%d/%m/%Y %H:%M')}",
                color=0x00ff00
            )
            public_embed.add_field(name="‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", value=summary, inline=False)
            public_embed.add_field(name="‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°", value=f"üíµ {total_price}‡∏ø", inline=False)
            
            # ‡πÅ‡∏™‡∏î‡∏á QR Code ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
            qr_embed = discord.Embed(
                title="üì≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πÅ‡∏Å‡∏ô QR Code ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô",
                description=f"**‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:** {interaction.user.mention}\n**‡∏¢‡∏≠‡∏î‡∏ä‡∏≥‡∏£‡∏∞:** üíµ {total_price}‡∏ø\n**‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£:** SCB (‡πÑ‡∏ó‡∏¢‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå)",
                color=0x4f0099
            )
            qr_embed.set_image(url="https://media.discordapp.net/attachments/1177559485137555456/1297159106787934249/QRCodeSCB.png?ex=6823d54f&is=682283cf&hm=10acdea9e554c0c107119f230b8a9122498dc5a240e4e24080f3fd7f204c9df9&format=webp&quality=lossless&width=760&height=760")
            qr_embed.set_footer(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡πÅ‡∏Ñ‡∏õ‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô")
            
            # ‡∏™‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞‡πÅ‡∏•‡∏∞ QR Code ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
            await interaction.followup.send(embeds=[public_embed, qr_embed])
            
            # Reset the cart
            view.quantities = [0] * len(view.products)
            await interaction.message.edit(content="üõçÔ∏è ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:\n‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", view=view)
        except Exception as e:
            await interaction.response.send_message(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}", ephemeral=True)

@bot.event
async def on_ready():
    """Event triggered when the bot is ready"""
    print(f"Bot is ready! Logged in as {bot.user}")
    
    # Create history file if it doesn't exist
    if not HISTORY_FILE.exists():
        HISTORY_FILE.touch()
        print(f"Created history file at {HISTORY_FILE}")
    
    # Register slash commands
    try:
        print("Registering slash commands...")
        # Shop Commands
        await bot.tree.sync()
        print("Slash commands registered successfully!")
    except Exception as e:
        print(f"Error registering slash commands: {e}")

@bot.command(name="money")
async def shop_money(ctx):
    """Command to open the money category shop"""
    await shop(ctx, "money")

@bot.command(name="‡πÄ‡∏á‡∏¥‡∏ô")
async def shop_money_th(ctx):
    """Command to open the money category shop (Thai)"""
    await shop(ctx, "money")

@bot.command(name="weapon")
async def shop_weapon(ctx):
    """Command to open the weapon category shop"""
    await shop(ctx, "weapon")
    
@bot.command(name="‡∏≠‡∏≤‡∏ß‡∏∏‡∏ò")
async def shop_weapon_th(ctx):
    """Command to open the weapon category shop (Thai)"""
    await shop(ctx, "weapon")

@bot.command(name="item")
async def shop_item(ctx):
    """Command to open the item category shop"""
    await shop(ctx, "item")
    
@bot.command(name="‡πÑ‡∏≠‡πÄ‡∏ó‡∏°")
async def shop_item_th(ctx):
    """Command to open the item category shop (Thai)"""
    await shop(ctx, "item")

@bot.command(name="car")
async def shop_car(ctx):
    """Command to open the car category shop"""
    await shop(ctx, "car")
    
@bot.command(name="‡∏£‡∏ñ")
async def shop_car_th(ctx):
    """Command to open the car category shop (Thai)"""
    await shop(ctx, "car")

@bot.command(name="fashion")
async def shop_fashion(ctx):
    """Command to open the fashion category shop"""
    await shop(ctx, "fashion")
    
@bot.command(name="‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô")
async def shop_fashion_th(ctx):
    """Command to open the fashion category shop (Thai)"""
    await shop(ctx, "fashion")

@bot.command(name="‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏ñ")
async def shop_rentcar(ctx):
    """Command to open the car rental category shop"""
    await shop(ctx, "‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏ñ")

@bot.command(name="‡∏£‡πâ‡∏≤‡∏ô")
async def shop(ctx, ‡∏´‡∏°‡∏ß‡∏î: str = None):
    """Command to open the shop"""
    # Check if the category is valid
    valid_categories = ["money", "weapon", "item", "car", "fashion", "‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏ñ"]
    
    if ‡∏´‡∏°‡∏ß‡∏î and ‡∏´‡∏°‡∏ß‡∏î not in valid_categories:
        categories_str = ", ".join([f"`{cat}`" for cat in valid_categories])
        await ctx.send(f"‚ùå ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ: {categories_str}")
        return
    
    view = ShopView(category=‡∏´‡∏°‡∏ß‡∏î)
    
    # If no products in this category
    if len(view.products) == 0:
        await ctx.send(f"‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î `{‡∏´‡∏°‡∏ß‡∏î}`")
        return
    
    title = "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:"
    if ‡∏´‡∏°‡∏ß‡∏î:
        title = f"üõçÔ∏è ‡∏´‡∏°‡∏ß‡∏î `{‡∏´‡∏°‡∏ß‡∏î}` - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:"
    
    await ctx.send(title, view=view)

@bot.command(name="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")
@commands.has_permissions(administrator=True)
async def add_product(ctx, ‡∏ä‡∏∑‡πà‡∏≠: str, ‡∏£‡∏≤‡∏Ñ‡∏≤: int, ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥: str, ‡∏´‡∏°‡∏ß‡∏î: str = "item"):
    """Command to add a new product (Admin only)"""
    try:
        # Check if the category is valid
        valid_categories = ["money", "weapon", "item", "car", "fashion", "‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏ñ"]
        if ‡∏´‡∏°‡∏ß‡∏î not in valid_categories:
            categories_str = ", ".join([f"`{cat}`" for cat in valid_categories])
            await ctx.send(f"‚ùå ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ: {categories_str}")
            return
        
        products = load_products()
        # Check if product already exists
        for product in products:
            if product["name"] == ‡∏ä‡∏∑‡πà‡∏≠:
                await ctx.send(f"‚ùå ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ '{‡∏ä‡∏∑‡πà‡∏≠}' ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
                return
                
        products.append({"name": ‡∏ä‡∏∑‡πà‡∏≠, "price": ‡∏£‡∏≤‡∏Ñ‡∏≤, "emoji": ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥, "category": ‡∏´‡∏°‡∏ß‡∏î})
        save_products(products)
        await ctx.send(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: {‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥} {‡∏ä‡∏∑‡πà‡∏≠} - {‡∏£‡∏≤‡∏Ñ‡∏≤}‡∏ø (‡∏´‡∏°‡∏ß‡∏î: {‡∏´‡∏°‡∏ß‡∏î})")
    except Exception as e:
        await ctx.send(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")

@bot.command(name="‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")
@commands.has_permissions(administrator=True)
async def remove_product(ctx, ‡∏ä‡∏∑‡πà‡∏≠: str):
    """Command to remove a product (Admin only)"""
    try:
        products = load_products()
        original_count = len(products)
        
        # Find product to show category before deletion
        product_to_delete = next((p for p in products if p["name"] == ‡∏ä‡∏∑‡πà‡∏≠), None)
        if not product_to_delete:
            await ctx.send(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ '{‡∏ä‡∏∑‡πà‡∏≠}'")
            return
        
        # Remove the product
        products = [p for p in products if p["name"] != ‡∏ä‡∏∑‡πà‡∏≠]
        save_products(products)
        
        category = product_to_delete.get("category", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏ß‡∏î")
        await ctx.send(f"üóëÔ∏è ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ '{‡∏ä‡∏∑‡πà‡∏≠}' ‡∏à‡∏≤‡∏Å‡∏´‡∏°‡∏ß‡∏î '{category}' ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
    except Exception as e:
        await ctx.send(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")

@bot.command(name="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")
@commands.has_permissions(administrator=True)
async def edit_product(ctx, ‡∏ä‡∏∑‡πà‡∏≠: str, ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà: str = None, ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏´‡∏°‡πà: int = None, ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡πÉ‡∏´‡∏°‡πà: str = None, ‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà: str = None):
    """Command to edit a product (Admin only)"""
    try:
        # Check if the new category is valid
        valid_categories = ["money", "weapon", "item", "car", "fashion", "‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏ñ"]
        if ‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà and ‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà not in valid_categories:
            categories_str = ", ".join([f"`{cat}`" for cat in valid_categories])
            await ctx.send(f"‚ùå ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ: {categories_str}")
            return
        
        products = load_products()
        
        # Find the product
        found = False
        for product in products:
            if product["name"] == ‡∏ä‡∏∑‡πà‡∏≠:
                found = True
                
                # Update product details if provided
                if ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà:
                    product["name"] = ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà
                if ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏´‡∏°‡πà is not None:
                    product["price"] = ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏´‡∏°‡πà
                if ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡πÉ‡∏´‡∏°‡πà:
                    product["emoji"] = ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡πÉ‡∏´‡∏°‡πà
                if ‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà:
                    product["category"] = ‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà
                
                break
        
        if not found:
            await ctx.send(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ '{‡∏ä‡∏∑‡πà‡∏≠}'")
            return
            
        save_products(products)
        
        product_name = ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà if ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà else ‡∏ä‡∏∑‡πà‡∏≠
        await ctx.send(f"‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ '{‡∏ä‡∏∑‡πà‡∏≠}' ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
        
        # Show updated product details
        product = next((p for p in products if p["name"] == product_name), None)
        if product:
            embed = discord.Embed(title="‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï", color=0x00ff00)
            embed.add_field(name="‡∏ä‡∏∑‡πà‡∏≠", value=product["name"], inline=True)
            embed.add_field(name="‡∏£‡∏≤‡∏Ñ‡∏≤", value=f"{product['price']}‡∏ø", inline=True)
            embed.add_field(name="‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥", value=product["emoji"], inline=True)
            embed.add_field(name="‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", value=product.get("category", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏ß‡∏î"), inline=True)
            await ctx.send(embed=embed)
            
    except Exception as e:
        await ctx.send(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")

@bot.command(name="‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
async def list_products(ctx, ‡∏´‡∏°‡∏ß‡∏î: str = None):
    """Command to list all products"""
    products = load_products()
    if not products:
        await ctx.send("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô")
        return
    
    # Check if category is valid
    valid_categories = ["money", "weapon", "item", "car", "fashion", "‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏ñ"]
    if ‡∏´‡∏°‡∏ß‡∏î and ‡∏´‡∏°‡∏ß‡∏î not in valid_categories:
        categories_str = ", ".join([f"`{cat}`" for cat in valid_categories])
        await ctx.send(f"‚ùå ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ: {categories_str}")
        return
    
    # Filter products by category if specified
    if ‡∏´‡∏°‡∏ß‡∏î:
        filtered_products = [p for p in products if p.get('category', '') == ‡∏´‡∏°‡∏ß‡∏î]
        if not filtered_products:
            await ctx.send(f"‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î `{‡∏´‡∏°‡∏ß‡∏î}`")
            return
        products = filtered_products
        embed_title = f"üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î '{‡∏´‡∏°‡∏ß‡∏î}'"
    else:
        # Group products by category
        categories = {}
        for product in products:
            category = product.get('category', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏ß‡∏î')
            if category not in categories:
                categories[category] = []
            categories[category].append(product)
        
        embed_title = "üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î)"
        embed = discord.Embed(title=embed_title, color=0x3498db)
        
        # Add category sections
        for category, category_products in categories.items():
            product_list = []
            for product in category_products:
                product_list.append(f"{product['emoji']} {product['name']} - {product['price']}‡∏ø")
            
            # Join products with newlines
            value = "\n".join(product_list) if product_list else "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
            
            # Add field for this category
            embed.add_field(
                name=f"üè∑Ô∏è {category.upper()}",
                value=value,
                inline=False
            )
        
        await ctx.send(embed=embed)
        return
    
    # Show products for a specific category
    embed = discord.Embed(title=embed_title, color=0x3498db)
    
    for product in products:
        embed.add_field(
            name=f"{product['emoji']} {product['name']}",
            value=f"‡∏£‡∏≤‡∏Ñ‡∏≤: {product['price']}‡∏ø",
            inline=True
        )
    
    await ctx.send(embed=embed)

@bot.command(name="‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥")
@commands.has_permissions(administrator=True)
async def history(ctx, ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: int = 5):
    """Command to view purchase history (Admin only)"""
    try:
        if not HISTORY_FILE.exists() or HISTORY_FILE.stat().st_size == 0:
            await ctx.send("‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠")
            return
            
        with open(HISTORY_FILE, "r", encoding="utf-8") as f:
            lines = f.readlines()
            
        if not lines:
            await ctx.send("‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠")
            return
            
        # Get the last N entries
        entries = lines[-‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:] if ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô > 0 else lines
            
        embed = discord.Embed(title="üìú ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠", color=0x00ff00)
        for line in entries:
            try:
                d = json.loads(line)
                dt = datetime.fromisoformat(d['timestamp'])
                formatted_time = dt.strftime("%d/%m/%Y %H:%M")
                summary = ", ".join([f"{x['name']} x{x['qty']}" for x in d['items']])
                embed.add_field(
                    name=f"üë§ {d['user']} ({formatted_time})",
                    value=f"{summary} = {d['total']}‡∏ø",
                    inline=False
                )
            except (json.JSONDecodeError, KeyError) as e:
                continue
                
        await ctx.send(embed=embed)
    except Exception as e:
        await ctx.send(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")

@bot.command(name="‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠")
async def help_command(ctx):
    """Command to display help information"""
    embed = discord.Embed(title="üìö ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", color=0xffa500)
    
    # General commands
    embed.add_field(
        name="!‡∏£‡πâ‡∏≤‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ /‡∏£‡πâ‡∏≤‡∏ô",
        value="‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
        inline=False
    )
    embed.add_field(
        name="!‡∏£‡πâ‡∏≤‡∏ô [‡∏´‡∏°‡∏ß‡∏î] ‡∏´‡∏£‡∏∑‡∏≠ /‡∏£‡πâ‡∏≤‡∏ô [‡∏´‡∏°‡∏ß‡∏î]",
        value="‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÇ‡∏î‡∏¢‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (‡πÄ‡∏á‡∏¥‡∏ô, ‡∏≠‡∏≤‡∏ß‡∏∏‡∏ò, ‡πÑ‡∏≠‡πÄ‡∏ó‡∏°, ‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå, ‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô, ‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏ñ)",
        inline=False
    )
    
    # Category shortcut commands
    embed.add_field(
        name="!money (!‡πÄ‡∏á‡∏¥‡∏ô), !weapon (!‡∏≠‡∏≤‡∏ß‡∏∏‡∏ò), !item (!‡πÑ‡∏≠‡πÄ‡∏ó‡∏°)",
        value="‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏•‡∏±‡∏î‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà",
        inline=False
    )
    embed.add_field(
        name="!car (!‡∏£‡∏ñ), !fashion (!‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô), !‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏ñ",
        value="‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏•‡∏±‡∏î‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (‡∏ï‡πà‡∏≠)",
        inline=False
    )
    
    embed.add_field(
        name="!‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏´‡∏£‡∏∑‡∏≠ /‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
        value="‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
        inline=False
    )
    embed.add_field(
        name="!‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î [‡∏´‡∏°‡∏ß‡∏î] ‡∏´‡∏£‡∏∑‡∏≠ /‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î [‡∏´‡∏°‡∏ß‡∏î]",
        value="‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏",
        inline=False
    )
    
    # Admin commands
    embed.add_field(
        name="üëë ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô",
        value="‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏• (Administrator)",
        inline=False
    )
    embed.add_field(
        name="!‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ [‡∏ä‡∏∑‡πà‡∏≠] [‡∏£‡∏≤‡∏Ñ‡∏≤] [‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥]\n‡∏´‡∏£‡∏∑‡∏≠ /‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
        value="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πâ‡∏≤‡∏ô",
        inline=True
    )
    embed.add_field(
        name="!‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ [‡∏ä‡∏∑‡πà‡∏≠]\n‡∏´‡∏£‡∏∑‡∏≠ /‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
        value="‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡πâ‡∏≤‡∏ô",
        inline=True
    )
    embed.add_field(
        name="!‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ [‡∏ä‡∏∑‡πà‡∏≠] [‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà] [‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏´‡∏°‡πà] [‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡πÉ‡∏´‡∏°‡πà]\n‡∏´‡∏£‡∏∑‡∏≠ /‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
        value="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)",
        inline=True
    )
    embed.add_field(
        name="!‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ [‡∏à‡∏≥‡∏ô‡∏ß‡∏ô]\n‡∏´‡∏£‡∏∑‡∏≠ /‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥",
        value="‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏ (‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ñ‡∏∑‡∏≠ 5)",
        inline=True
    )
    
    await ctx.send(embed=embed)

@bot.event
async def on_command_error(ctx, error):
    """Error handler for bot commands"""
    if isinstance(error, commands.CommandNotFound):
        return
    elif isinstance(error, commands.MissingPermissions):
        await ctx.send("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏• (Administrator)")
    elif isinstance(error, commands.MissingRole):
        await ctx.send("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ")
    elif isinstance(error, commands.MissingRequiredArgument):
        await ctx.send(f"‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {str(error)}")
    elif isinstance(error, commands.BadArgument):
        await ctx.send("‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏™‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    else:
        await ctx.send(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(error)}")
        print(f"Command error: {error}")

# Get token from environment variables with fallback to a default value (for testing)
TOKEN = os.getenv("DISCORD_BOT_TOKEN", "")

if not TOKEN:
    print("‚ùå ERROR: Discord bot token not provided. Please set the DISCORD_BOT_TOKEN environment variable.")
    exit(1)

# Define slash commands
@bot.tree.command(name="‡∏£‡πâ‡∏≤‡∏ô", description="‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")
@discord.app_commands.describe(‡∏´‡∏°‡∏ß‡∏î="‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π")
@discord.app_commands.choices(‡∏´‡∏°‡∏ß‡∏î=[
    discord.app_commands.Choice(name="‡πÄ‡∏á‡∏¥‡∏ô", value="money"),
    discord.app_commands.Choice(name="‡∏≠‡∏≤‡∏ß‡∏∏‡∏ò", value="weapon"),
    discord.app_commands.Choice(name="‡πÑ‡∏≠‡πÄ‡∏ó‡∏°", value="item"),
    discord.app_commands.Choice(name="‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå", value="car"),
    discord.app_commands.Choice(name="‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô", value="fashion"),
    discord.app_commands.Choice(name="‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏ñ", value="‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏ñ")
])
async def shop_slash(interaction: discord.Interaction, ‡∏´‡∏°‡∏ß‡∏î: str = None):
    """Slash command to open the shop"""
    view = ShopView(category=‡∏´‡∏°‡∏ß‡∏î)
    
    # If no products in this category
    if len(view.products) == 0:
        await interaction.response.send_message(f"‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î `{‡∏´‡∏°‡∏ß‡∏î}`")
        return
    
    title = "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:"
    if ‡∏´‡∏°‡∏ß‡∏î:
        title = f"üõçÔ∏è ‡∏´‡∏°‡∏ß‡∏î `{‡∏´‡∏°‡∏ß‡∏î}` - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:"
    
    await interaction.response.send_message(title, view=view)

@bot.tree.command(name="‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", description="‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
@discord.app_commands.describe(‡∏´‡∏°‡∏ß‡∏î="‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π")
@discord.app_commands.choices(‡∏´‡∏°‡∏ß‡∏î=[
    discord.app_commands.Choice(name="‡πÄ‡∏á‡∏¥‡∏ô", value="money"),
    discord.app_commands.Choice(name="‡∏≠‡∏≤‡∏ß‡∏∏‡∏ò", value="weapon"),
    discord.app_commands.Choice(name="‡πÑ‡∏≠‡πÄ‡∏ó‡∏°", value="item"),
    discord.app_commands.Choice(name="‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå", value="car"),
    discord.app_commands.Choice(name="‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô", value="fashion"),
    discord.app_commands.Choice(name="‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏ñ", value="‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏ñ")
])
async def list_products_slash(interaction: discord.Interaction, ‡∏´‡∏°‡∏ß‡∏î: str = None):
    """Slash command to list all products"""
    products = load_products()
    if not products:
        await interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô")
        return
        
    embed = discord.Embed(title="üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", color=0x3498db)
    
    for product in products:
        embed.add_field(
            name=f"{product['emoji']} {product['name']}",
            value=f"‡∏£‡∏≤‡∏Ñ‡∏≤: {product['price']}‡∏ø",
            inline=True
        )
    
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", description="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πâ‡∏≤‡∏ô (Admin only)")
@discord.app_commands.describe(
    ‡∏ä‡∏∑‡πà‡∏≠="‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
    ‡∏£‡∏≤‡∏Ñ‡∏≤="‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)",
    ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥="‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ ‡πÄ‡∏ä‡πà‡∏ô :emoji_name:)",
    ‡∏´‡∏°‡∏ß‡∏î="‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ)"
)
@discord.app_commands.choices(‡∏´‡∏°‡∏ß‡∏î=[
    discord.app_commands.Choice(name="‡πÄ‡∏á‡∏¥‡∏ô", value="money"),
    discord.app_commands.Choice(name="‡∏≠‡∏≤‡∏ß‡∏∏‡∏ò", value="weapon"),
    discord.app_commands.Choice(name="‡πÑ‡∏≠‡πÄ‡∏ó‡∏°", value="item"),
    discord.app_commands.Choice(name="‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå", value="car"),
    discord.app_commands.Choice(name="‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô", value="fashion"),
    discord.app_commands.Choice(name="‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏ñ", value="‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏ñ")
])
async def add_product_slash(interaction: discord.Interaction, ‡∏ä‡∏∑‡πà‡∏≠: str, ‡∏£‡∏≤‡∏Ñ‡∏≤: int, ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥: str, ‡∏´‡∏°‡∏ß‡∏î: str = "item"):
    """Slash command to add a new product (Admin only)"""
    # Check if user has Administrator permissions
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏• (Administrator)", ephemeral=True)
        return
        
    try:
        # Parse custom emoji if provided in <:name:id> format
        emoji_to_use = ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥
        if ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥.startswith("<") and ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥.endswith(">"):
            # Already in proper format, use as is
            pass
        elif ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥.startswith(":") and ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥.endswith(":"):
            # Convert :emoji_name: to actual emoji
            emoji_name = ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥.strip(":")
            # Try to find the emoji in the server
            found_emoji = discord.utils.get(interaction.guild.emojis, name=emoji_name)
            if found_emoji:
                emoji_to_use = str(found_emoji)
            else:
                await interaction.response.send_message(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥ '{‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥}' ‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ", ephemeral=True)
                return
        
        products = load_products()
        # Check if product already exists
        for product in products:
            if product["name"] == ‡∏ä‡∏∑‡πà‡∏≠:
                await interaction.response.send_message(f"‚ùå ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ '{‡∏ä‡∏∑‡πà‡∏≠}' ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)
                return
                
        products.append({"name": ‡∏ä‡∏∑‡πà‡∏≠, "price": ‡∏£‡∏≤‡∏Ñ‡∏≤, "emoji": emoji_to_use, "category": ‡∏´‡∏°‡∏ß‡∏î})
        save_products(products)
        await interaction.response.send_message(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: {emoji_to_use} {‡∏ä‡∏∑‡πà‡∏≠} - {‡∏£‡∏≤‡∏Ñ‡∏≤}‡∏ø (‡∏´‡∏°‡∏ß‡∏î: {‡∏´‡∏°‡∏ß‡∏î})")
    except Exception as e:
        await interaction.response.send_message(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}", ephemeral=True)

@bot.tree.command(name="‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", description="‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡πâ‡∏≤‡∏ô (Admin only)")
@discord.app_commands.describe(‡∏ä‡∏∑‡πà‡∏≠="‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö")
async def remove_product_slash(interaction: discord.Interaction, ‡∏ä‡∏∑‡πà‡∏≠: str):
    """Slash command to remove a product (Admin only)"""
    # Check if user has Administrator permissions
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏• (Administrator)", ephemeral=True)
        return
        
    try:
        products = load_products()
        original_count = len(products)
        
        # Find product to show category before deletion
        product_to_delete = next((p for p in products if p["name"] == ‡∏ä‡∏∑‡πà‡∏≠), None)
        if not product_to_delete:
            await interaction.response.send_message(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ '{‡∏ä‡∏∑‡πà‡∏≠}'", ephemeral=True)
            return
        
        # Remove the product
        products = [p for p in products if p["name"] != ‡∏ä‡∏∑‡πà‡∏≠]
        save_products(products)
        
        category = product_to_delete.get("category", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏ß‡∏î")
        await interaction.response.send_message(f"üóëÔ∏è ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ '{‡∏ä‡∏∑‡πà‡∏≠}' ‡∏à‡∏≤‡∏Å‡∏´‡∏°‡∏ß‡∏î '{category}' ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
    except Exception as e:
        await interaction.response.send_message(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}", ephemeral=True)

@bot.tree.command(name="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", description="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (Admin only)")
@discord.app_commands.describe(
    ‡∏ä‡∏∑‡πà‡∏≠="‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç",
    ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà="‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô)",
    ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏´‡∏°‡πà="‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô)",
    ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡πÉ‡∏´‡∏°‡πà="‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô)",
    ‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà="‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô)"
)
@discord.app_commands.choices(‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà=[
    discord.app_commands.Choice(name="‡πÄ‡∏á‡∏¥‡∏ô", value="money"),
    discord.app_commands.Choice(name="‡∏≠‡∏≤‡∏ß‡∏∏‡∏ò", value="weapon"),
    discord.app_commands.Choice(name="‡πÑ‡∏≠‡πÄ‡∏ó‡∏°", value="item"),
    discord.app_commands.Choice(name="‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå", value="car"),
    discord.app_commands.Choice(name="‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô", value="fashion"),
    discord.app_commands.Choice(name="‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏ñ", value="‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏ñ")
])
async def edit_product_slash(interaction: discord.Interaction, ‡∏ä‡∏∑‡πà‡∏≠: str, ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà: str = None, ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏´‡∏°‡πà: int = None, ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡πÉ‡∏´‡∏°‡πà: str = None, ‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà: str = None):
    """Slash command to edit a product (Admin only)"""
    # Check if user has Administrator permissions
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏• (Administrator)", ephemeral=True)
        return
        
    # Check if the new category is valid if provided
    valid_categories = ["money", "weapon", "item", "car", "fashion", "‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏ñ"]
    if ‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà and ‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà not in valid_categories:
        categories_str = ", ".join([f"`{cat}`" for cat in valid_categories])
        await interaction.response.send_message(f"‚ùå ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ: {categories_str}", ephemeral=True)
        return
        
    try:
        products = load_products()
        
        # Find the product
        found = False
        for product in products:
            if product["name"] == ‡∏ä‡∏∑‡πà‡∏≠:
                found = True
                
                # Update product details if provided
                if ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà:
                    product["name"] = ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà
                if ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏´‡∏°‡πà is not None:
                    product["price"] = ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏´‡∏°‡πà
                if ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡πÉ‡∏´‡∏°‡πà:
                    product["emoji"] = ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡πÉ‡∏´‡∏°‡πà
                if ‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà:
                    product["category"] = ‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà
                
                break
        
        if not found:
            await interaction.response.send_message(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ '{‡∏ä‡∏∑‡πà‡∏≠}'", ephemeral=True)
            return
            
        save_products(products)
        
        product_name = ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà if ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà else ‡∏ä‡∏∑‡πà‡∏≠
        
        # Show updated product details
        product = next((p for p in products if p["name"] == product_name), None)
        if product:
            embed = discord.Embed(title="‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï", color=0x00ff00)
            embed.add_field(name="‡∏ä‡∏∑‡πà‡∏≠", value=product["name"], inline=True)
            embed.add_field(name="‡∏£‡∏≤‡∏Ñ‡∏≤", value=f"{product['price']}‡∏ø", inline=True)
            embed.add_field(name="‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥", value=product["emoji"], inline=True)
            
            # Add category field if present
            if "category" in product:
                category_name = product["category"]
                category_display = {
                    "money": "‡πÄ‡∏á‡∏¥‡∏ô",
                    "weapon": "‡∏≠‡∏≤‡∏ß‡∏∏‡∏ò",
                    "item": "‡πÑ‡∏≠‡πÄ‡∏ó‡∏°",
                    "car": "‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå",
                    "fashion": "‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô",
                    "‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏ñ": "‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏ñ"
                }.get(category_name, category_name)
                embed.add_field(name="‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", value=category_display, inline=True)
                
            await interaction.response.send_message(embed=embed)
            
    except Exception as e:
        await interaction.response.send_message(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}", ephemeral=True)

@bot.tree.command(name="‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥", description="‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (Admin only)")
@discord.app_commands.describe(‡∏à‡∏≥‡∏ô‡∏ß‡∏ô="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π (‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ñ‡∏∑‡∏≠ 5)")
async def history_slash(interaction: discord.Interaction, ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: int = 5):
    """Slash command to view purchase history (Admin only)"""
    # Check if user has Administrator permissions
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏• (Administrator)", ephemeral=True)
        return
        
    try:
        if not HISTORY_FILE.exists() or HISTORY_FILE.stat().st_size == 0:
            await interaction.response.send_message("‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠", ephemeral=True)
            return
            
        with open(HISTORY_FILE, "r", encoding="utf-8") as f:
            lines = f.readlines()
            
        if not lines:
            await interaction.response.send_message("‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠", ephemeral=True)
            return
            
        # Get the last N entries
        entries = lines[-‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:] if ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô > 0 else lines
            
        embed = discord.Embed(title="üìú ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠", color=0x00ff00)
        for line in entries:
            try:
                d = json.loads(line)
                dt = datetime.fromisoformat(d['timestamp'])
                formatted_time = dt.strftime("%d/%m/%Y %H:%M")
                summary = ", ".join([f"{x['name']} x{x['qty']}" for x in d['items']])
                embed.add_field(
                    name=f"üë§ {d['user']} ({formatted_time})",
                    value=f"{summary} = {d['total']}‡∏ø",
                    inline=False
                )
            except (json.JSONDecodeError, KeyError) as e:
                continue
                
        await interaction.response.send_message(embed=embed)
    except Exception as e:
        await interaction.response.send_message(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}", ephemeral=True)

@bot.tree.command(name="‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠", description="‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
async def help_slash(interaction: discord.Interaction):
    """Slash command to display help information"""
    embed = discord.Embed(title="üìö ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", color=0xffa500)
    
    # General commands
    embed.add_field(
        name="/‡∏£‡πâ‡∏≤‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ !‡∏£‡πâ‡∏≤‡∏ô",
        value="‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
        inline=False
    )
    embed.add_field(
        name="/‡∏£‡πâ‡∏≤‡∏ô [‡∏´‡∏°‡∏ß‡∏î] ‡∏´‡∏£‡∏∑‡∏≠ !‡∏£‡πâ‡∏≤‡∏ô [‡∏´‡∏°‡∏ß‡∏î]",
        value="‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÇ‡∏î‡∏¢‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (‡πÄ‡∏á‡∏¥‡∏ô, ‡∏≠‡∏≤‡∏ß‡∏∏‡∏ò, ‡πÑ‡∏≠‡πÄ‡∏ó‡∏°, ‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå, ‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô, ‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏ñ)",
        inline=False
    )
    
    # Category shortcut commands
    embed.add_field(
        name="!money (!‡πÄ‡∏á‡∏¥‡∏ô), !weapon (!‡∏≠‡∏≤‡∏ß‡∏∏‡∏ò), !item (!‡πÑ‡∏≠‡πÄ‡∏ó‡∏°)",
        value="‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏•‡∏±‡∏î‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà",
        inline=False
    )
    embed.add_field(
        name="!car (!‡∏£‡∏ñ), !fashion (!‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô), !‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏ñ",
        value="‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏•‡∏±‡∏î‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (‡∏ï‡πà‡∏≠)",
        inline=False
    )
    
    embed.add_field(
        name="/‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏´‡∏£‡∏∑‡∏≠ !‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
        value="‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
        inline=False
    )
    embed.add_field(
        name="/‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î [‡∏´‡∏°‡∏ß‡∏î] ‡∏´‡∏£‡∏∑‡∏≠ !‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î [‡∏´‡∏°‡∏ß‡∏î]",
        value="‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏",
        inline=False
    )
    
    # Admin commands
    embed.add_field(
        name="üëë ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô",
        value="‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏• (Administrator)",
        inline=False
    )
    embed.add_field(
        name="/‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠ !‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
        value="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πâ‡∏≤‡∏ô",
        inline=True
    )
    embed.add_field(
        name="/‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠ !‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
        value="‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡πâ‡∏≤‡∏ô",
        inline=True
    )
    embed.add_field(
        name="/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠ !‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
        value="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
        inline=True
    )
    embed.add_field(
        name="/‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ ‡∏´‡∏£‡∏∑‡∏≠ !‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥",
        value="‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î",
        inline=True
    )
    
    await interaction.response.send_message(embed=embed)

server_on()

# Run the bot
if __name__ == "__main__":
    bot.run(os.getenv('TOKEN'))
